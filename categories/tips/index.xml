<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on やるだけやる</title>
    <link>https://dohq.github.io/categories/tips/</link>
    <description>Recent content in Tips on やるだけやる</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>dorastone@gmail.com</managingEditor>
    <webMaster>dorastone@gmail.com</webMaster>
    <copyright>2017 R.Maejima</copyright>
    <lastBuildDate>Mon, 17 Dec 2018 10:23:00 +0900</lastBuildDate>
    
	<atom:link href="https://dohq.github.io/categories/tips/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vim AdventCalendar 17日目</title>
      <link>https://dohq.github.io/posts/vim-ac-20181217/</link>
      <pubDate>Mon, 17 Dec 2018 10:23:00 +0900</pubDate>
      <author>dorastone@gmail.com</author>
      <guid>https://dohq.github.io/posts/vim-ac-20181217/</guid>
      <description>今回のVimconf2018でなんの成果も得られませませんでした！
訳: Vimconf2018行けなかった…
WindowsでVimのビルドしてみようか！ 本当はVimconfの感想記事とか書こうと思ったのですがなんの成果も得られなかった為急遽別ネタを書きます。
msvc(VisualStudio)でビルドします。
ついでにpython3/terminalを有効にします。
(luaもrubyもperlも自分が使ってるプラグインには必要無いので…)
今回使用した環境  Windows10 快適なネット接続環境  また、ビルドに使うマシンのスペックについてはVisualStudio 2017 CommunityEditionの システム要件に則ります。
てじゅーん 今回は D:\build-vim 以下にビルドに必要なものを放り込みます。
必要なものインストール VS2017CE 今回はコミュニティエディションを使います。
 Microsoftのダウンロードページから コミュニティ をダウンロードして実行 Nextを連打していくとインストールするコンポーネントを選択する画面が出るので、以下のコンポーネントを選択  「ワークロード」タブの「C++ によるデスクトップ開発」   Python3 既に純正PythonやAnacondaをインストールして使ってる人は特に追加で必要なものはありません。 初めてです！という人は以下のPythonをインストールして下さい
 ダウンロードページから Windows x86-64 executable installer をインストールして下さい  ※ embededdableはvimのコンパイルに必要なヘッダファイルなどが無いので今回は使えません。
vim 現在vimはgithub上で開発が進められているので、git cloneすればおk
git clone https://github.com/vim/vim D:\build-vim\vim
ビルドする 毎回ビルドコマンド打つのもつらいので、今回はビルド用のbatファイルを作っておきます。
@echo off set PATH=%SystemRoot% set PATH=%PATH%;%SystemRoot%\System32 set INCLUDE= set LIBPATH= @call &amp;quot;C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.</description>
    </item>
    
    <item>
      <title>EC2でntpの設定が効かない</title>
      <link>https://dohq.github.io/posts/set_ec2_ntp/</link>
      <pubDate>Fri, 19 Jan 2018 14:29:46 +0900</pubDate>
      <author>dorastone@gmail.com</author>
      <guid>https://dohq.github.io/posts/set_ec2_ntp/</guid>
      <description>EC2上のLinux(Centos5)でntp時刻同期が出来ない 現行のサービスにて、EC2上でCentOS5のシステムがあります。
ところが最近このマシンの時刻が早まってきてまして、いろいろと不都合が…
ntpサービスの導入をしていなかった事から
「まぁNTPの設定すればええやろ」
と軽い考えだったのですが、ntpの設定しようがnptdateコマンド打とうが時刻が合ってくれない…
なんていうことがありましたとさ
原因 EC2インスタンスはXen環境で動いているようで、 Domain-0 の時刻に引っぱられる ようです。
なので、カーネルパラメータからこれを無効にすればOKです。
対策 /etc/sysctl.conf xen.independent_wallclock = 1 &amp;lt;- 追加 sysctl -p  即反映させる場合は、
echo &#39;1&#39; &amp;gt; /proc/sys/xen/independent_wallclock  これで、ntpdate ntp.nict.jpでok</description>
    </item>
    
    <item>
      <title>メモリに乗らない量のselect結果をcsvへ書き出す(python)</title>
      <link>https://dohq.github.io/posts/write_huge_csv_for_py/</link>
      <pubDate>Wed, 10 Jan 2018 18:27:24 +0900</pubDate>
      <author>dorastone@gmail.com</author>
      <guid>https://dohq.github.io/posts/write_huge_csv_for_py/</guid>
      <description>数百GBデータでもcsvに書き出したい！ 業務用のツールを作成する際、 DBのselect結果をcsvへ書き出したい
という要望は結構あるかと思います。
でもって適当にcur作ってfetchallしてcsv.writerってやるんですがselect結果がうん千万件とかになるとfetchallした瞬間にメモリを食い潰していきます。
気がついたらインスタンスが死んでたということもしばしば(当社比)
どーしたか ※2018-10-07 update 結局、pandas.io.sqlで chunksize を設定し、 TextFileReader をforで回しつつcsvへ書き出すようにした。
その分ディスクIOが断続的に起きますがまぁそこはもうしょうがない
chunksizeは知見だったので、メモ
その後実際にうん千万件のデータで試した所、pandas.io.sqlのchunksizeは一旦ローカルに全てfetchするという動作でした。(メモリ食い潰してec2が死にました)
https://github.com/pandas-dev/pandas/issues/12265
なので、サーバサイドカーソルを使用してデータの書き出しを行いました。
def write_sql_result(sql f): with get_connection() as conn: with conn.cursor(&#39;query1&#39;) as cur: cur.itersize = 1000 cur.execute(sql) with gzip.open(f, &#39;wt&#39;) as f: w = csv.writer(f, lineterminator=&#39;\n&#39;, quoting=csv.QUOTE_ALL) for i in cur: w.writerow(i)  とりあえず、これで大丈夫そう</description>
    </item>
    
    <item>
      <title>VirtualMachineディレクトリを移動する</title>
      <link>https://dohq.github.io/posts/move-virtualmachine-dir/</link>
      <pubDate>Wed, 03 Jan 2018 03:08:22 +0900</pubDate>
      <author>dorastone@gmail.com</author>
      <guid>https://dohq.github.io/posts/move-virtualmachine-dir/</guid>
      <description>既存仮想マシンがある状態でVirtualMachineディレクトリを移動したい VirtualMachineディレクトリを移動してvirtualboxからaddしようとすると
Failed to open virtual machine located in /mnt/ssd/VirtualMachine/Windows7/Windows7.vbox. Cannot register the hard disk &#39;&amp;lt;新VDIパス&amp;gt;&#39; {UUID} because a hard disk &#39;&amp;lt;旧VDIパス&amp;gt;&#39; with UUID {UUID} already exists. Result Code: NS_ERROR_INVALID_ARG (0x80070057) Component: VirtualBoxWrap Interface: IVirtualBox {9570b9d5-f1a1-448a-10c5-e12f5285adad}  って言われてつらかった。
自分ではこれで上手くいったって手順なのであしからず
手順 VBoxManage internalcommands sethduuid &amp;lt;新VDIパス&amp;gt;
新しいUUIDをコピー
vboxファイルの HardDisk セクションに上記UUIDで置換
これでどうですかね</description>
    </item>
    
    <item>
      <title>ArchLinuxでMokeeをビルドする</title>
      <link>https://dohq.github.io/posts/mokee/</link>
      <pubDate>Wed, 11 Jan 2017 02:09:46 +0900</pubDate>
      <author>dorastone@gmail.com</author>
      <guid>https://dohq.github.io/posts/mokee/</guid>
      <description>自分メモ Mokee(MM)のビルド Xiaomi Mi5(gemini)のMokeeをビルドしたのでそのメモ 尚、対象デバイスはgemini(Xiaomi Mi5)とする。
開発ツール系はインストールしてあるよね？
環境 OS: Arch Linux Kernel: x86_64 Linux 4.8.13-1-ARCH Uptime: 4d 23h 59m Packages: 836 Shell: zsh 5.3.1 CPU: Intel Core i5-2520M CPU @ 3.2GHz RAM: 7292MiB / 15934MiB  以下雑なコマンド yaourt -S repo imagemagick mkdir ~/Mokee &amp;amp;&amp;amp; cd $_ virtualenv2 venv repo init -u https://github.com/MoKee/android.git -b mkm repo sync -j16 . build/envsetup.sh . venv/bin/activate breakfast gemini mka bacon  その他メモ selinux permissiveのkernelを作る</description>
    </item>
    
  </channel>
</rss>