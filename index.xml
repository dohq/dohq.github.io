<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>やるだけやる</title>
    <link>https://dohq.github.io/</link>
    <description>Recent content on やるだけやる</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>dorastone@gmail.com</managingEditor>
    <webMaster>dorastone@gmail.com</webMaster>
    <copyright>2017 R.Maejima</copyright>
    <lastBuildDate>Fri, 25 Jan 2019 09:46:03 +0900</lastBuildDate>
    
	<atom:link href="https://dohq.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SSHポートフォワーディングを多段で行う</title>
      <link>https://dohq.github.io/posts/ssh-tunnel-via-multiple-hops/</link>
      <pubDate>Fri, 25 Jan 2019 09:46:03 +0900</pubDate>
      <author>dorastone@gmail.com</author>
      <guid>https://dohq.github.io/posts/ssh-tunnel-via-multiple-hops/</guid>
      <description>なんで 外出先から自宅にあるESXiのWEB管理画面が見たいとか…ニッチすぎるか
図 ┌────────┐ ┌──────┐ ┌──────┐ ┌──────────┐ │手元のPC│ │踏み台│ │自宅PC│ │自宅サーバ│ └───┬────┘ └──┬───┘ └──┬───┘ └────┬─────┘ │ ポート8080(なんでもいい)│ │ │ │ ────────────────────────&amp;gt; │ │ │ │ │ │ │ │ ポート44444(なんでもいい)│ │ │ │ ─────────────────────────&amp;gt; │ │ │ │ │ │ │ │ ポート443 │ │ │ │ ──────────────────&amp;gt; ┌───┴────┐ ┌──┴───┐ ┌──┴───┐ ┌────┴─────┐ │手元のPC│ │踏み台│ │自宅PC│ │自宅サーバ│ └────────┘ └──────┘ └──────┘ └──────────┘  結論 基本的には普通のポートフォワードコマンドに則る 例として 手元のPC: localhost 踏み台: bastion 自宅PC: home 自宅サーバ: server で繋げられるものとする</description>
    </item>
    
    <item>
      <title>Vim AdventCalendar 17日目</title>
      <link>https://dohq.github.io/posts/vim-ac-20181217/</link>
      <pubDate>Mon, 17 Dec 2018 10:23:00 +0900</pubDate>
      <author>dorastone@gmail.com</author>
      <guid>https://dohq.github.io/posts/vim-ac-20181217/</guid>
      <description>今回のVimconf2018でなんの成果も得られませませんでした！
訳: Vimconf2018行けなかった…
WindowsでVimのビルドしてみようか！ 本当はVimconfの感想記事とか書こうと思ったのですがなんの成果も得られなかった為急遽別ネタを書きます。
msvc(VisualStudio)でビルドします。
ついでにpython3/terminalを有効にします。
(luaもrubyもperlも自分が使ってるプラグインには必要無いので…)
今回使用した環境  Windows10 快適なネット接続環境  また、ビルドに使うマシンのスペックについてはVisualStudio 2017 CommunityEditionの システム要件に則ります。
てじゅーん 今回は D:\build-vim 以下にビルドに必要なものを放り込みます。
必要なものインストール VS2017CE 今回はコミュニティエディションを使います。
 Microsoftのダウンロードページから コミュニティ をダウンロードして実行 Nextを連打していくとインストールするコンポーネントを選択する画面が出るので、以下のコンポーネントを選択  「ワークロード」タブの「C++ によるデスクトップ開発」   Python3 既に純正PythonやAnacondaをインストールして使ってる人は特に追加で必要なものはありません。 初めてです！という人は以下のPythonをインストールして下さい
 ダウンロードページから Windows x86-64 executable installer をインストールして下さい  ※ embededdableはvimのコンパイルに必要なヘッダファイルなどが無いので今回は使えません。
vim 現在vimはgithub上で開発が進められているので、git cloneすればおk
git clone https://github.com/vim/vim D:\build-vim\vim
ビルドする 毎回ビルドコマンド打つのもつらいので、今回はビルド用のbatファイルを作っておきます。
@echo off set PATH=%SystemRoot% set PATH=%PATH%;%SystemRoot%\System32 set INCLUDE= set LIBPATH= @call &amp;quot;C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.</description>
    </item>
    
    <item>
      <title>EC2でntpの設定が効かない</title>
      <link>https://dohq.github.io/posts/set-ec2-ntp/</link>
      <pubDate>Fri, 19 Jan 2018 14:29:46 +0900</pubDate>
      <author>dorastone@gmail.com</author>
      <guid>https://dohq.github.io/posts/set-ec2-ntp/</guid>
      <description>EC2上のLinux(Centos5)でntp時刻同期が出来ない 現行のサービスにて、EC2上でCentOS5のシステムがあります。
ところが最近このマシンの時刻が早まってきてまして、いろいろと不都合が…
ntpサービスの導入をしていなかった事から
「まぁNTPの設定すればええやろ」
と軽い考えだったのですが、ntpの設定しようがnptdateコマンド打とうが時刻が合ってくれない…
なんていうことがありましたとさ
原因 EC2インスタンスはXen環境で動いているようで、 Domain-0 の時刻に引っぱられる ようです。
なので、カーネルパラメータからこれを無効にすればOKです。
対策 /etc/sysctl.conf xen.independent_wallclock = 1 &amp;lt;- 追加 sysctl -p  即反映させる場合は、
echo &#39;1&#39; &amp;gt; /proc/sys/xen/independent_wallclock  これで、ntpdate ntp.nict.jpでok</description>
    </item>
    
    <item>
      <title>メモリに乗らない量のselect結果をcsvへ書き出す(python)</title>
      <link>https://dohq.github.io/posts/write-huge-csv-for-py/</link>
      <pubDate>Wed, 10 Jan 2018 18:27:24 +0900</pubDate>
      <author>dorastone@gmail.com</author>
      <guid>https://dohq.github.io/posts/write-huge-csv-for-py/</guid>
      <description>数百GBデータでもcsvに書き出したい！ 業務用のツールを作成する際、 DBのselect結果をcsvへ書き出したい
という要望は結構あるかと思います。
でもって適当にcur作ってfetchallしてcsv.writerってやるんですがselect結果がうん千万件とかになるとfetchallした瞬間にメモリを食い潰していきます。
気がついたらインスタンスが死んでたということもしばしば(当社比)
どーしたか ※2018-10-07 update 結局、pandas.io.sqlで chunksize を設定し、 TextFileReader をforで回しつつcsvへ書き出すようにした。
その分ディスクIOが断続的に起きますがまぁそこはもうしょうがない
chunksizeは知見だったので、メモ
その後実際にうん千万件のデータで試した所、pandas.io.sqlのchunksizeは一旦ローカルに全てfetchするという動作でした。(メモリ食い潰してec2が死にました)
https://github.com/pandas-dev/pandas/issues/12265
なので、サーバサイドカーソルを使用してデータの書き出しを行いました。
def write_sql_result(sql f): with get_connection() as conn: with conn.cursor(&#39;query1&#39;) as cur: cur.itersize = 1000 cur.execute(sql) with gzip.open(f, &#39;wt&#39;) as f: w = csv.writer(f, lineterminator=&#39;\n&#39;, quoting=csv.QUOTE_ALL) for i in cur: w.writerow(i)  とりあえず、これで大丈夫そう</description>
    </item>
    
    <item>
      <title>VirtualMachineディレクトリを移動する</title>
      <link>https://dohq.github.io/posts/move-virtualmachine-dir/</link>
      <pubDate>Wed, 03 Jan 2018 03:08:22 +0900</pubDate>
      <author>dorastone@gmail.com</author>
      <guid>https://dohq.github.io/posts/move-virtualmachine-dir/</guid>
      <description>既存仮想マシンがある状態でVirtualMachineディレクトリを移動したい VirtualMachineディレクトリを移動してvirtualboxからaddしようとすると
Failed to open virtual machine located in /mnt/ssd/VirtualMachine/Windows7/Windows7.vbox. Cannot register the hard disk &#39;&amp;lt;新VDIパス&amp;gt;&#39; {UUID} because a hard disk &#39;&amp;lt;旧VDIパス&amp;gt;&#39; with UUID {UUID} already exists. Result Code: NS_ERROR_INVALID_ARG (0x80070057) Component: VirtualBoxWrap Interface: IVirtualBox {9570b9d5-f1a1-448a-10c5-e12f5285adad}  って言われてつらかった。
自分ではこれで上手くいったって手順なのであしからず
手順 VBoxManage internalcommands sethduuid &amp;lt;新VDIパス&amp;gt;
新しいUUIDをコピー
vboxファイルの HardDisk セクションに上記UUIDで置換
これでどうですかね</description>
    </item>
    
    <item>
      <title>cv</title>
      <link>https://dohq.github.io/about/</link>
      <pubDate>Sun, 12 Nov 2017 18:23:58 +0900</pubDate>
      <author>dorastone@gmail.com</author>
      <guid>https://dohq.github.io/about/</guid>
      <description> Name dohq
Age 28
Gender 男性
Job 201605~ 決済系サービス 201404~ 小規模SIer 201205~ 医療系SIer 201004~ サーバメーカー フィールドエンジニア
Skill  Platform  OS RHEL SUSE Enterprise HP-UX AIX  Program  bat bash csh Windows bat Python golang c   </description>
    </item>
    
    <item>
      <title>Vimconf2017</title>
      <link>https://dohq.github.io/posts/vimconf2017/</link>
      <pubDate>Wed, 08 Nov 2017 11:50:07 +0900</pubDate>
      <author>dorastone@gmail.com</author>
      <guid>https://dohq.github.io/posts/vimconf2017/</guid>
      <description>何勘違いしてるんだ?まだ俺のvimconf2017は終了してないぜ 周回遅れにも程がありますが2017年11月4日に開催されたvimconf2017に参加しましたので、
その感想をば
GoZen Vim, Me and Community (haya14busa) incsearch.vim/vim-easymotionなどのauthorです。
私自身vim-easymotionは外せないプラギンなので足を向けて寝れませんね。
発表については、haya14busaさんとvimの歴史についてでした。
vimを使い始めた理由が「なんとなくかっこよかったから」は激しく同意。
自分は15年くらい前からLinuxの虜になっていたので、そこでデフォエディタだったのが触り始めの切っ掛けでしたね
easymotionは、元々Lokaltogさんという方が作ってたプラギンらしく、
それをforkして弄っていたところ「コラボレータにならないか？」とのお誘いがあったらしい。
ここらへんはOSSの強みが出てるなぁと思いました。
また、haya14busaさんがauthorになってからスター成長曲線をキレイに描いていたのも印象に残りました。
最後の方に発表されていたvimのコミュニティについても、
確かに特定の言語向けアプリケーションと違ってエディタというツールなので、いろんな使用者がいるだろうなぁとなるほどしました。 incsearchの機能がvim本体へと取り込まれたのはスゴいですね！おめでとうございます。
The Past and Future of Vim-go (fatih) vim-goというgo言語をvimで開発するのにベリー便利なプラギンのauthorです。
そのほかにもgoのコミッターでもあるようで、さらにはDigitalOceanの中の人でもあるとか。
最近はvultrですが、昔はDigitalOcean使ってました！！！
ちなみに「ファティー」さんと読むようです(ずっとフェイスだと思ってたのは内緒)
僕自身はプロダクトでgoを使った事が無い上、vim-goをゴリゴリ使った事もありません。
「goの勉強したい！」って長年言い続けてvim-goだけ入ってます…
でもって共感したのが「ドキュメント書くのつらい…」って事
設計書とか詳細設計書とか手順書とかめんどいですね(白目)
とにかく、go書きたいっていうかvim-go使う為にgo書きたい！！ ってなりました。
お昼 お弁当めっちゃ豪華やん？ってなって、このチケット代は安すぎるやろ…って心配になりつつ
すきやき弁当とコーヒーと白い恋人に舌鼓を打ちました。
Talk show (Vim 鼎談) kaoriyaさんmattnさんK-takataさんの3名によるトークショーでした。
自分がvimに始めて触れたのがバージョン6とかその辺で「もう10年近く前になるのか…」と聞きながら黄昏れていたら
「比較的新しいですねー by kaoriya」
とのこと…ま、まぁ？私自身が若いし？(震え声)
まぁ本格的に使い始めたのは7.3くらいからです。
壇上の3名はwindowsメインということでした。
私も仕事ではwindows端末しか与えられないのでterminalは待ちに待った機能でしたね。
mattnさんもおっしゃってしたが、2016年のvimアドベントカレンダーに書いて頂いた時、
自分もすぐさまパッチ当てて使ってました。これ無しではもう生きれない体になってます。
それと、ここで始めて生mattnさんを見ました。twitterでエゴサしてたけど「mattnさん服着てる…？」みたいなの多すぎでした。
GoGo Creating your lovely color scheme (kokopon) Icebergというcolorschemeのauthor
自分はここ1年くらいbase16-ashesを使ってるのですが、同じように暗めなcolorschemeなので興味深く拝見させて頂きました。
「まずコンセプトを決める事。なにか迷ったらコンセプトを元にする」
至言ですね！
vim-mode-plus: The most ambitious vim emulator in the world (t9md) VisualStudioCodeでvimキーバインドを実現するプラグインについて</description>
    </item>
    
    <item>
      <title>ArchLinuxでMokeeをビルドする</title>
      <link>https://dohq.github.io/posts/mokee/</link>
      <pubDate>Wed, 11 Jan 2017 02:09:46 +0900</pubDate>
      <author>dorastone@gmail.com</author>
      <guid>https://dohq.github.io/posts/mokee/</guid>
      <description>自分メモ Mokee(MM)のビルド Xiaomi Mi5(gemini)のMokeeをビルドしたのでそのメモ 尚、対象デバイスはgemini(Xiaomi Mi5)とする。
開発ツール系はインストールしてあるよね？
環境 OS: Arch Linux Kernel: x86_64 Linux 4.8.13-1-ARCH Uptime: 4d 23h 59m Packages: 836 Shell: zsh 5.3.1 CPU: Intel Core i5-2520M CPU @ 3.2GHz RAM: 7292MiB / 15934MiB  以下雑なコマンド yaourt -S repo imagemagick mkdir ~/Mokee &amp;amp;&amp;amp; cd $_ virtualenv2 venv repo init -u https://github.com/MoKee/android.git -b mkm repo sync -j16 . build/envsetup.sh . venv/bin/activate breakfast gemini mka bacon  その他メモ selinux permissiveのkernelを作る</description>
    </item>
    
  </channel>
</rss>